{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/errorboundary.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","username","className","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchText","target","value","fetch","then","response","json","users","searchField","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAeeA,G,MAZF,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,SAC7B,OACI,yBAAKC,UAAU,6CACX,yBAAKC,IAAG,+BAA0BH,EAAKC,EAA/B,YAAmDG,IAAI,WAC/D,6BACI,4BAAKN,GACL,2BAAIC,OCgBLM,EAtBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGf,OACI,yBAAKJ,UAAY,8CAETI,EAAOC,KAAI,SAACC,EAAOC,GACf,OAAQ,kBAAC,EAAD,CACJC,IAAOJ,EAAOG,GAAGT,GACjBF,KAAQQ,EAAOG,GAAGX,KAClBE,GAAMM,EAAOG,GAAGT,GAChBD,MAASO,EAAOG,GAAGV,MACnBE,SAAYK,EAAOG,GAAGR,gBCC/BU,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCcXI,E,YApBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,UAAW,GAHD,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,4DAGJG,KAAKL,MAAMO,a,GAjBEC,aCSbC,G,MARA,SAACT,GACZ,OACI,yBAAKU,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/Db,EAAMO,YC2CJO,E,YAxCX,aAAc,IAAD,8BACT,+CAaJC,eAAiB,SAACC,GACd,EAAKV,SAAS,CAACW,WAAaD,EAAME,OAAOC,SAbzC,EAAKlB,MAAQ,CACTZ,OAAQ,GACR4B,WAAY,IAJP,E,iFAQO,IAAD,OACfG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAU,EAAKlB,SAAS,CAACjB,OAASmC,S,+BAOxC,IAAD,EACuCnB,KAAKJ,MAAzCZ,EADH,EACGA,OAAoBoC,EADvB,EACWR,WACXS,EAAiBrC,EAAOsC,QAAO,SAAApC,GAC/B,OAAOA,EAAMV,KAAK+C,cAAcC,SAASJ,EAAYG,kBAEzD,OAAQvC,EAAOyC,OAGP,yBAAK7C,UAAU,UACX,wBAAIA,UAAU,SAAd,gBACA,kBAAC,EAAD,CAAWU,aAAcU,KAAKU,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAUqC,OAPpC,2C,GAzBMlB,aCIEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.b50bb972.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = ( {name, email, id, username}) => {\n    return (\n        <div className='tc card dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id + username}?200x200`} alt='robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n   \n    return (\n        <div className = 'flex flex-wrap items-center justify-center'>\n            {\n                robots.map((robot, i) => {\n                    return (<Card \n                        key = {robots[i].id} \n                        name = {robots[i].name} \n                        id = {robots[i].id} \n                        email = {robots[i].email} \n                        username = {robots[i].username} \n                    />  ); \n                })\n            }\n        </div>\n\n    );\n    \n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search Robots' \n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\n\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops! Something went wrong.</h1>\r\n        }\r\n        else\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/errorboundary';\n//import robots from './robots.js';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchText: ''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then( users => {this.setState({robots : users})});  \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchText : event.target.value});\n    }\n\n    render(){\n        const {robots, searchText: searchField } = this.state;\n        let filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return !robots.length ?\n            <h1>Loading</h1> :\n           (\n                <div className='tc app'>\n                    <h1 className='f1 tc'>Robo Friends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots = {filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )        \n    }\n    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />    \n    , document.getElementById('root')\n);\n// ReactDOM.render(\n//     <App />  \n//     , document.getElementById('root')\n//     );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}